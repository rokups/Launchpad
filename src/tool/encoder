#!/usr/bin/env python3
#
# MIT License
#
# Copyright 2017 Launchpad project contributors (see COPYRIGHT.md)
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
import gzip
import base64
import argparse


def hex_encode(value, separator='', line_split=0):
    parts = []
    for i, b in enumerate(value):
        parts.append(f'{b:02X}{separator}')
        if line_split:
            if ((i + 1) % line_split) == 0:
                parts.append('\n')
    return ''.join(parts)


def fragment_by_length(value, line_split):
    return '\n'.join([f for f in [value[i:i+line_split] for i in range(0, len(result), line_split)]])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-e', '--encoding', choices=['bytes', 'hex', 'base64'])
    parser.add_argument('-g', '--gzip', action='store_true', default=False)
    parser.add_argument('-l', '--line-split', type=int, default=192)
    parser.add_argument('file_path')
    args = parser.parse_args()

    with open(args.file_path, 'rb') as fp:
        result = fp.read()
        if args.gzip:
            result = gzip.compress(result)
        if args.encoding == 'bytes':
            result = hex_encode(result, '-', args.line_split)
        elif args.encoding == 'hex':
            result = hex_encode(result, '', args.line_split)
        elif args.encoding == 'base64':
            result = base64.b64encode(result).decode()
            if args.line_split:
                result = fragment_by_length(result, args.line_split)
        else:
            raise ValueError('Unknown data encoding.')

    print(result)
